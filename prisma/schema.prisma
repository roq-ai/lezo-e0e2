generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model complaint {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  complaint_status String   @db.VarChar(255)
  description      String   @db.VarChar(255)
  user_id          String   @db.Uuid
  order_id         String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  order            order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model delivery {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  delivery_status  String   @db.VarChar(255)
  current_location String   @db.VarChar(255)
  destination      String   @db.VarChar(255)
  user_id          String   @db.Uuid
  order_id         String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  order            order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model menu {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  item_name       String       @db.VarChar(255)
  price           Int
  availability    Boolean
  description     String?      @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_name     String       @db.VarChar(255)
  order_status      String       @db.VarChar(255)
  total_price       Int
  delivery_location String       @db.VarChar(255)
  user_id           String       @db.Uuid
  organization_id   String       @db.Uuid
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  updated_at        DateTime     @default(now()) @db.Timestamp(6)
  complaint         complaint[]
  delivery          delivery[]
  organization      organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  menu        menu[]
  order       order[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  complaint    complaint[]
  delivery     delivery[]
  order        order[]
  organization organization[]
}
